/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.store.parquet.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class MetadataColumns implements Externalizable, Message<MetadataColumns>, Schema<MetadataColumns>
{
    public static final class ColumnTypeInfo implements Externalizable, Message<ColumnTypeInfo>, Schema<ColumnTypeInfo>
    {
        public enum PrimitiveTypeName implements com.dyuproject.protostuff.EnumLite<PrimitiveTypeName>
        {
            INT64(0),
            INT32(1),
            BOOLEAN(2),
            BINARY(3),
            FLOAT(4),
            DOUBLE(5),
            INT96(6),
            FIXED_LEN_BYTE_ARRAY(7);
            
            public final int number;
            
            private PrimitiveTypeName (int number)
            {
                this.number = number;
            }
            
            public int getNumber()
            {
                return number;
            }
            
            public static PrimitiveTypeName valueOf(int number)
            {
                switch(number) 
                {
                    case 0: return INT64;
                    case 1: return INT32;
                    case 2: return BOOLEAN;
                    case 3: return BINARY;
                    case 4: return FLOAT;
                    case 5: return DOUBLE;
                    case 6: return INT96;
                    case 7: return FIXED_LEN_BYTE_ARRAY;
                    default: return null;
                }
            }
        }
        public enum OriginalType implements com.dyuproject.protostuff.EnumLite<OriginalType>
        {
            MAP(0),
            LIST(1),
            UTF8(2),
            MAP_KEY_VALUE(3),
            ENUM(4),
            DECIMAL(5),
            DATE(6),
            TIME_MILLIS(7),
            TIMESTAMP_MILLIS(8),
            UINT_8(9),
            UINT_16(10),
            UINT_32(11),
            UINT_64(12),
            INT_8(13),
            INT_16(14),
            INT_32(15),
            INT_64(16),
            JSON(17),
            BSON(18),
            INTERVAL(19);
            
            public final int number;
            
            private OriginalType (int number)
            {
                this.number = number;
            }
            
            public int getNumber()
            {
                return number;
            }
            
            public static OriginalType valueOf(int number)
            {
                switch(number) 
                {
                    case 0: return MAP;
                    case 1: return LIST;
                    case 2: return UTF8;
                    case 3: return MAP_KEY_VALUE;
                    case 4: return ENUM;
                    case 5: return DECIMAL;
                    case 6: return DATE;
                    case 7: return TIME_MILLIS;
                    case 8: return TIMESTAMP_MILLIS;
                    case 9: return UINT_8;
                    case 10: return UINT_16;
                    case 11: return UINT_32;
                    case 12: return UINT_64;
                    case 13: return INT_8;
                    case 14: return INT_16;
                    case 15: return INT_32;
                    case 16: return INT_64;
                    case 17: return JSON;
                    case 18: return BSON;
                    case 19: return INTERVAL;
                    default: return null;
                }
            }
        }


        public static Schema<ColumnTypeInfo> getSchema()
        {
            return DEFAULT_INSTANCE;
        }

        public static ColumnTypeInfo getDefaultInstance()
        {
            return DEFAULT_INSTANCE;
        }

        static final ColumnTypeInfo DEFAULT_INSTANCE = new ColumnTypeInfo();

        
        private String name;
        private PrimitiveTypeName primitiveType;
        private OriginalType originalType;

        public ColumnTypeInfo()
        {
            
        }

        // getters and setters

        // name

        public String getName()
        {
            return name;
        }

        public ColumnTypeInfo setName(String name)
        {
            this.name = name;
            return this;
        }

        // primitiveType

        public PrimitiveTypeName getPrimitiveType()
        {
            return primitiveType == null ? PrimitiveTypeName.INT64 : primitiveType;
        }

        public ColumnTypeInfo setPrimitiveType(PrimitiveTypeName primitiveType)
        {
            this.primitiveType = primitiveType;
            return this;
        }

        // originalType

        public OriginalType getOriginalType()
        {
            return originalType == null ? OriginalType.MAP : originalType;
        }

        public ColumnTypeInfo setOriginalType(OriginalType originalType)
        {
            this.originalType = originalType;
            return this;
        }

        // java serialization

        public void readExternal(ObjectInput in) throws IOException
        {
            GraphIOUtil.mergeDelimitedFrom(in, this, this);
        }

        public void writeExternal(ObjectOutput out) throws IOException
        {
            GraphIOUtil.writeDelimitedTo(out, this, this);
        }

        // message method

        public Schema<ColumnTypeInfo> cachedSchema()
        {
            return DEFAULT_INSTANCE;
        }

        // schema methods

        public ColumnTypeInfo newMessage()
        {
            return new ColumnTypeInfo();
        }

        public Class<ColumnTypeInfo> typeClass()
        {
            return ColumnTypeInfo.class;
        }

        public String messageName()
        {
            return ColumnTypeInfo.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ColumnTypeInfo.class.getName();
        }

        public boolean isInitialized(ColumnTypeInfo message)
        {
            return true;
        }

        public void mergeFrom(Input input, ColumnTypeInfo message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.name = input.readString();
                        break;
                    case 2:
                        message.primitiveType = PrimitiveTypeName.valueOf(input.readEnum());
                        break;
                    case 3:
                        message.originalType = OriginalType.valueOf(input.readEnum());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ColumnTypeInfo message) throws IOException
        {
            if(message.name != null)
                output.writeString(1, message.name, false);

            if(message.primitiveType != null)
                 output.writeEnum(2, message.primitiveType.number, false);

            if(message.originalType != null)
                 output.writeEnum(3, message.originalType.number, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "primitiveType";
                case 3: return "originalType";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = __fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
        static
        {
            __fieldMap.put("name", 1);
            __fieldMap.put("primitiveType", 2);
            __fieldMap.put("originalType", 3);
        }
        
    }


    public static Schema<MetadataColumns> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MetadataColumns getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MetadataColumns DEFAULT_INSTANCE = new MetadataColumns();

    
    private List<ColumnTypeInfo> columns;

    public MetadataColumns()
    {
        
    }

    // getters and setters

    // columns

    public List<ColumnTypeInfo> getColumnsList()
    {
        return columns;
    }

    public MetadataColumns setColumnsList(List<ColumnTypeInfo> columns)
    {
        this.columns = columns;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MetadataColumns> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MetadataColumns newMessage()
    {
        return new MetadataColumns();
    }

    public Class<MetadataColumns> typeClass()
    {
        return MetadataColumns.class;
    }

    public String messageName()
    {
        return MetadataColumns.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MetadataColumns.class.getName();
    }

    public boolean isInitialized(MetadataColumns message)
    {
        return true;
    }

    public void mergeFrom(Input input, MetadataColumns message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 2:
                    if(message.columns == null)
                        message.columns = new ArrayList<ColumnTypeInfo>();
                    message.columns.add(input.mergeObject(null, ColumnTypeInfo.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MetadataColumns message) throws IOException
    {
        if(message.columns != null)
        {
            for(ColumnTypeInfo columns : message.columns)
            {
                if(columns != null)
                    output.writeObject(2, columns, ColumnTypeInfo.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 2: return "columns";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("columns", 2);
    }
    
}
