/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.store.parquet.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ParquetFileMetadata implements Externalizable, Message<ParquetFileMetadata>, Schema<ParquetFileMetadata>
{
    public static final class RowGroup implements Externalizable, Message<RowGroup>, Schema<RowGroup>
    {
        public static final class HostAffinity implements Externalizable, Message<HostAffinity>, Schema<HostAffinity>
        {

            public static Schema<HostAffinity> getSchema()
            {
                return DEFAULT_INSTANCE;
            }

            public static HostAffinity getDefaultInstance()
            {
                return DEFAULT_INSTANCE;
            }

            static final HostAffinity DEFAULT_INSTANCE = new HostAffinity();

            
            private String key;
            private float value;

            public HostAffinity()
            {
                
            }

            // getters and setters

            // key

            public String getKey()
            {
                return key;
            }

            public HostAffinity setKey(String key)
            {
                this.key = key;
                return this;
            }

            // value

            public float getValue()
            {
                return value;
            }

            public HostAffinity setValue(float value)
            {
                this.value = value;
                return this;
            }

            // java serialization

            public void readExternal(ObjectInput in) throws IOException
            {
                GraphIOUtil.mergeDelimitedFrom(in, this, this);
            }

            public void writeExternal(ObjectOutput out) throws IOException
            {
                GraphIOUtil.writeDelimitedTo(out, this, this);
            }

            // message method

            public Schema<HostAffinity> cachedSchema()
            {
                return DEFAULT_INSTANCE;
            }

            // schema methods

            public HostAffinity newMessage()
            {
                return new HostAffinity();
            }

            public Class<HostAffinity> typeClass()
            {
                return HostAffinity.class;
            }

            public String messageName()
            {
                return HostAffinity.class.getSimpleName();
            }

            public String messageFullName()
            {
                return HostAffinity.class.getName();
            }

            public boolean isInitialized(HostAffinity message)
            {
                return true;
            }

            public void mergeFrom(Input input, HostAffinity message) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            message.key = input.readString();
                            break;
                        case 2:
                            message.value = input.readFloat();
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }   
                }
            }


            public void writeTo(Output output, HostAffinity message) throws IOException
            {
                if(message.key != null)
                    output.writeString(1, message.key, false);

                if(message.value != 0)
                    output.writeFloat(2, message.value, false);
            }

            public String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "key";
                    case 2: return "value";
                    default: return null;
                }
            }

            public int getFieldNumber(String name)
            {
                final Integer number = __fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }

            private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
            static
            {
                __fieldMap.put("key", 1);
                __fieldMap.put("value", 2);
            }
            
        }
        public static final class ColumnMetadata implements Externalizable, Message<ColumnMetadata>, Schema<ColumnMetadata>
        {

            public static Schema<ColumnMetadata> getSchema()
            {
                return DEFAULT_INSTANCE;
            }

            public static ColumnMetadata getDefaultInstance()
            {
                return DEFAULT_INSTANCE;
            }

            static final ColumnMetadata DEFAULT_INSTANCE = new ColumnMetadata();

            
            private Integer name;
            private long nulls;
            private long vint64;
            private int vint32;
            private Boolean vbool;
            private ByteString vbinary;
            private float vfloat;
            private double vdouble;

            public ColumnMetadata()
            {
                
            }

            public ColumnMetadata(
                Integer name
            )
            {
                this.name = name;
            }

            // getters and setters

            // name

            public Integer getName()
            {
                return name;
            }

            public ColumnMetadata setName(Integer name)
            {
                this.name = name;
                return this;
            }

            // nulls

            public long getNulls()
            {
                return nulls;
            }

            public ColumnMetadata setNulls(long nulls)
            {
                this.nulls = nulls;
                return this;
            }

            // vint64

            public long getVint64()
            {
                return vint64;
            }

            public ColumnMetadata setVint64(long vint64)
            {
                this.vint64 = vint64;
                return this;
            }

            // vint32

            public int getVint32()
            {
                return vint32;
            }

            public ColumnMetadata setVint32(int vint32)
            {
                this.vint32 = vint32;
                return this;
            }

            // vbool

            public Boolean getVbool()
            {
                return vbool;
            }

            public ColumnMetadata setVbool(Boolean vbool)
            {
                this.vbool = vbool;
                return this;
            }

            // vbinary

            public ByteString getVbinary()
            {
                return vbinary;
            }

            public ColumnMetadata setVbinary(ByteString vbinary)
            {
                this.vbinary = vbinary;
                return this;
            }

            // vfloat

            public float getVfloat()
            {
                return vfloat;
            }

            public ColumnMetadata setVfloat(float vfloat)
            {
                this.vfloat = vfloat;
                return this;
            }

            // vdouble

            public double getVdouble()
            {
                return vdouble;
            }

            public ColumnMetadata setVdouble(double vdouble)
            {
                this.vdouble = vdouble;
                return this;
            }

            // java serialization

            public void readExternal(ObjectInput in) throws IOException
            {
                GraphIOUtil.mergeDelimitedFrom(in, this, this);
            }

            public void writeExternal(ObjectOutput out) throws IOException
            {
                GraphIOUtil.writeDelimitedTo(out, this, this);
            }

            // message method

            public Schema<ColumnMetadata> cachedSchema()
            {
                return DEFAULT_INSTANCE;
            }

            // schema methods

            public ColumnMetadata newMessage()
            {
                return new ColumnMetadata();
            }

            public Class<ColumnMetadata> typeClass()
            {
                return ColumnMetadata.class;
            }

            public String messageName()
            {
                return ColumnMetadata.class.getSimpleName();
            }

            public String messageFullName()
            {
                return ColumnMetadata.class.getName();
            }

            public boolean isInitialized(ColumnMetadata message)
            {
                return 
                    message.name != null;
            }

            public void mergeFrom(Input input, ColumnMetadata message) throws IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            message.name = input.readUInt32();
                            break;
                        case 2:
                            message.nulls = input.readUInt64();
                            break;
                        case 3:
                            message.vint64 = input.readSInt64();
                            break;
                        case 4:
                            message.vint32 = input.readSInt32();
                            break;
                        case 5:
                            message.vbool = input.readBool();
                            break;
                        case 6:
                            message.vbinary = input.readBytes();
                            break;
                        case 7:
                            message.vfloat = input.readFloat();
                            break;
                        case 8:
                            message.vdouble = input.readDouble();
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }   
                }
            }


            public void writeTo(Output output, ColumnMetadata message) throws IOException
            {
                if(message.name == null)
                    throw new UninitializedMessageException(message);
                output.writeUInt32(1, message.name, false);

                if(message.nulls != 0)
                    output.writeUInt64(2, message.nulls, false);

                if(message.vint64 != 0)
                    output.writeSInt64(3, message.vint64, false);

                if(message.vint32 != 0)
                    output.writeSInt32(4, message.vint32, false);

                if(message.vbool != null)
                    output.writeBool(5, message.vbool, false);

                if(message.vbinary != null)
                    output.writeBytes(6, message.vbinary, false);

                if(message.vfloat != 0)
                    output.writeFloat(7, message.vfloat, false);

                if(message.vdouble != 0)
                    output.writeDouble(8, message.vdouble, false);
            }

            public String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "name";
                    case 2: return "nulls";
                    case 3: return "vint64";
                    case 4: return "vint32";
                    case 5: return "vbool";
                    case 6: return "vbinary";
                    case 7: return "vfloat";
                    case 8: return "vdouble";
                    default: return null;
                }
            }

            public int getFieldNumber(String name)
            {
                final Integer number = __fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }

            private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
            static
            {
                __fieldMap.put("name", 1);
                __fieldMap.put("nulls", 2);
                __fieldMap.put("vint64", 3);
                __fieldMap.put("vint32", 4);
                __fieldMap.put("vbool", 5);
                __fieldMap.put("vbinary", 6);
                __fieldMap.put("vfloat", 7);
                __fieldMap.put("vdouble", 8);
            }
            
        }


        public static Schema<RowGroup> getSchema()
        {
            return DEFAULT_INSTANCE;
        }

        public static RowGroup getDefaultInstance()
        {
            return DEFAULT_INSTANCE;
        }

        static final RowGroup DEFAULT_INSTANCE = new RowGroup();

        
        private long start;
        private long length;
        private long rowCount;
        private List<HostAffinity> affinities;
        private List<ColumnMetadata> columns;

        public RowGroup()
        {
            
        }

        // getters and setters

        // start

        public long getStart()
        {
            return start;
        }

        public RowGroup setStart(long start)
        {
            this.start = start;
            return this;
        }

        // length

        public long getLength()
        {
            return length;
        }

        public RowGroup setLength(long length)
        {
            this.length = length;
            return this;
        }

        // rowCount

        public long getRowCount()
        {
            return rowCount;
        }

        public RowGroup setRowCount(long rowCount)
        {
            this.rowCount = rowCount;
            return this;
        }

        // affinities

        public List<HostAffinity> getAffinitiesList()
        {
            return affinities;
        }

        public RowGroup setAffinitiesList(List<HostAffinity> affinities)
        {
            this.affinities = affinities;
            return this;
        }

        // columns

        public List<ColumnMetadata> getColumnsList()
        {
            return columns;
        }

        public RowGroup setColumnsList(List<ColumnMetadata> columns)
        {
            this.columns = columns;
            return this;
        }

        // java serialization

        public void readExternal(ObjectInput in) throws IOException
        {
            GraphIOUtil.mergeDelimitedFrom(in, this, this);
        }

        public void writeExternal(ObjectOutput out) throws IOException
        {
            GraphIOUtil.writeDelimitedTo(out, this, this);
        }

        // message method

        public Schema<RowGroup> cachedSchema()
        {
            return DEFAULT_INSTANCE;
        }

        // schema methods

        public RowGroup newMessage()
        {
            return new RowGroup();
        }

        public Class<RowGroup> typeClass()
        {
            return RowGroup.class;
        }

        public String messageName()
        {
            return RowGroup.class.getSimpleName();
        }

        public String messageFullName()
        {
            return RowGroup.class.getName();
        }

        public boolean isInitialized(RowGroup message)
        {
            return true;
        }

        public void mergeFrom(Input input, RowGroup message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.start = input.readUInt64();
                        break;
                    case 2:
                        message.length = input.readUInt64();
                        break;
                    case 3:
                        message.rowCount = input.readUInt64();
                        break;
                    case 4:
                        if(message.affinities == null)
                            message.affinities = new ArrayList<HostAffinity>();
                        message.affinities.add(input.mergeObject(null, HostAffinity.getSchema()));
                        break;

                    case 5:
                        if(message.columns == null)
                            message.columns = new ArrayList<ColumnMetadata>();
                        message.columns.add(input.mergeObject(null, ColumnMetadata.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, RowGroup message) throws IOException
        {
            if(message.start != 0)
                output.writeUInt64(1, message.start, false);

            if(message.length != 0)
                output.writeUInt64(2, message.length, false);

            if(message.rowCount != 0)
                output.writeUInt64(3, message.rowCount, false);

            if(message.affinities != null)
            {
                for(HostAffinity affinities : message.affinities)
                {
                    if(affinities != null)
                        output.writeObject(4, affinities, HostAffinity.getSchema(), true);
                }
            }


            if(message.columns != null)
            {
                for(ColumnMetadata columns : message.columns)
                {
                    if(columns != null)
                        output.writeObject(5, columns, ColumnMetadata.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "start";
                case 2: return "length";
                case 3: return "rowCount";
                case 4: return "affinities";
                case 5: return "columns";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = __fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
        static
        {
            __fieldMap.put("start", 1);
            __fieldMap.put("length", 2);
            __fieldMap.put("rowCount", 3);
            __fieldMap.put("affinities", 4);
            __fieldMap.put("columns", 5);
        }
        
    }


    public static Schema<ParquetFileMetadata> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ParquetFileMetadata getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ParquetFileMetadata DEFAULT_INSTANCE = new ParquetFileMetadata();

    
    private String path;
    private long length;
    private List<RowGroup> rowGroups;

    public ParquetFileMetadata()
    {
        
    }

    // getters and setters

    // path

    public String getPath()
    {
        return path;
    }

    public ParquetFileMetadata setPath(String path)
    {
        this.path = path;
        return this;
    }

    // length

    public long getLength()
    {
        return length;
    }

    public ParquetFileMetadata setLength(long length)
    {
        this.length = length;
        return this;
    }

    // rowGroups

    public List<RowGroup> getRowGroupsList()
    {
        return rowGroups;
    }

    public ParquetFileMetadata setRowGroupsList(List<RowGroup> rowGroups)
    {
        this.rowGroups = rowGroups;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ParquetFileMetadata> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ParquetFileMetadata newMessage()
    {
        return new ParquetFileMetadata();
    }

    public Class<ParquetFileMetadata> typeClass()
    {
        return ParquetFileMetadata.class;
    }

    public String messageName()
    {
        return ParquetFileMetadata.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ParquetFileMetadata.class.getName();
    }

    public boolean isInitialized(ParquetFileMetadata message)
    {
        return true;
    }

    public void mergeFrom(Input input, ParquetFileMetadata message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.path = input.readString();
                    break;
                case 2:
                    message.length = input.readUInt64();
                    break;
                case 3:
                    if(message.rowGroups == null)
                        message.rowGroups = new ArrayList<RowGroup>();
                    message.rowGroups.add(input.mergeObject(null, RowGroup.getSchema()));
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ParquetFileMetadata message) throws IOException
    {
        if(message.path != null)
            output.writeString(1, message.path, false);

        if(message.length != 0)
            output.writeUInt64(2, message.length, false);

        if(message.rowGroups != null)
        {
            for(RowGroup rowGroups : message.rowGroups)
            {
                if(rowGroups != null)
                    output.writeObject(3, rowGroups, RowGroup.getSchema(), true);
            }
        }

    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "path";
            case 2: return "length";
            case 3: return "rowGroups";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("path", 1);
        __fieldMap.put("length", 2);
        __fieldMap.put("rowGroups", 3);
    }
    
}
