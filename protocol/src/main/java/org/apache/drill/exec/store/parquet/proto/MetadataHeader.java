/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from protobuf

package org.apache.drill.exec.store.parquet.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class MetadataHeader implements Externalizable, Message<MetadataHeader>, Schema<MetadataHeader>
{

    public static Schema<MetadataHeader> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static MetadataHeader getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final MetadataHeader DEFAULT_INSTANCE = new MetadataHeader();

    
    private String metadataVersion;
    private List<String> directories;

    public MetadataHeader()
    {
        
    }

    public MetadataHeader(
        String metadataVersion
    )
    {
        this.metadataVersion = metadataVersion;
    }

    // getters and setters

    // metadataVersion

    public String getMetadataVersion()
    {
        return metadataVersion;
    }

    public MetadataHeader setMetadataVersion(String metadataVersion)
    {
        this.metadataVersion = metadataVersion;
        return this;
    }

    // directories

    public List<String> getDirectoriesList()
    {
        return directories;
    }

    public MetadataHeader setDirectoriesList(List<String> directories)
    {
        this.directories = directories;
        return this;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<MetadataHeader> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public MetadataHeader newMessage()
    {
        return new MetadataHeader();
    }

    public Class<MetadataHeader> typeClass()
    {
        return MetadataHeader.class;
    }

    public String messageName()
    {
        return MetadataHeader.class.getSimpleName();
    }

    public String messageFullName()
    {
        return MetadataHeader.class.getName();
    }

    public boolean isInitialized(MetadataHeader message)
    {
        return 
            message.metadataVersion != null;
    }

    public void mergeFrom(Input input, MetadataHeader message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.metadataVersion = input.readString();
                    break;
                case 4:
                    if(message.directories == null)
                        message.directories = new ArrayList<String>();
                    message.directories.add(input.readString());
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, MetadataHeader message) throws IOException
    {
        if(message.metadataVersion == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.metadataVersion, false);

        if(message.directories != null)
        {
            for(String directories : message.directories)
            {
                if(directories != null)
                    output.writeString(4, directories, true);
            }
        }
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "metadataVersion";
            case 4: return "directories";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("metadataVersion", 1);
        __fieldMap.put("directories", 4);
    }
    
}
